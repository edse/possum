<?php
header('Content-type: text/html; charset=UTF-8');
mb_internal_encoding('UTF-8');

/**
 * VideoDropbox
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    astolfo
 * @subpackage model
 * @author     Emerson Estrella
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class VideoDropbox extends BaseVideoDropbox
{

	public function processPenddingInsertAction() {
		//check action and status
		if((($this->getAction() == "Insert")||($this->getAction() == "Update"))&&($this->getStatus() == "Pendding")){
		    //check if files exists
			//if(is_file(sfConfig::get('sf_upload_dir').'/assets/video/original/'.$this->AssetVideo->getOriginalFile())){
        if($this->AssetVideo->Asset->Site->getYoutubeChannel() != ""){
          $channel = $this->AssetVideo->Asset->Site->getYoutubeChannel();
        }else{
          $channel = "cultura";
        }
        if($this->AssetVideo->Asset->Site->getYoutubeGenre() != ""){
          $genre = $this->AssetVideo->Asset->Site->getYoutubeGenre();
        }else{
          $genre = "Entertainment";
        }

				$file = $this->AssetVideo->getOriginalFile();
				$has_file = true;
				$folder = time();
				$file_folder = sfConfig::get('sf_upload_dir')."/assets/video/original/";

				//Media properties
				$title = trim(substr(str_replace('\n',' ',str_replace('&','&amp;',$this->AssetVideo->Asset->getTitle())),0,95));
				$description = trim(str_replace('\n',' ',str_replace('&','&amp;',$this->AssetVideo->Asset->getDescription())));
				$words = $this->AssetVideo->Asset->getTags();
				$headline = ($this->AssetVideo->getHeadline()=="") ? 'Sem notas' : $this->AssetVideo->getHeadline();
				$description = ($description=="") ? 'TV Cultura' : $description;
				if(count($words) <= 0) $words[] = 'TV Cultura';
				
        if($this->AssetVideo->Asset->getDateStart() != ""){
          $a = explode(" ", $this->AssetVideo->Asset->getDateStart());
          $start_time = $a[0]."T".$a[1]."-03:00";
        }
        else
          $start_time = "1997-07-16T19:20:30-03:00";
        
				//Folder
				$this->setFolder($folder);
				$this->save();
				
				$dropboxDir = sfConfig::get('sf_upload_dir').'/dropbox/'.$this->getFolder();
				if(!is_dir($dropboxDir))
					mkdir($dropboxDir, 0777);
				chdir($dropboxDir);

				$asset_id = '';
				if($this->getAction() != "Insert")
					$asset_id .= ' id="'.$this->AssetVideo->getYoutubeId().'"';

				//XML
				$content = <<<EOT
<?xml version="1.0"?>
<feed xmlns="http://www.youtube.com/schemas/cms/2.0"
    notification_email="emersonestrella@tvcultura.com.br" strict="True">
EOT;

/*
  <asset type="web">
    <custom_id>CULTURA-{$this->AssetVideo->getId()}</custom_id>
    <description>{$description}</description>
    <notes>{$headline}</notes>
    <title>{$title}</title>
    <url>http://www.tvcultura.com.br/</url>
  </asset>
*/

				if($this->getAction() == "Insert"){
					$content .= <<<EOT

  <!-- define reference files -->
  <file type="video">
    <filename>{$file}</filename>
  </file>

EOT;
				}
  
				$content .= <<<EOT

  <!-- define the video metadata -->
  <video{$asset_id}>
    <public>True</public>
    <allow_comments>Approve</allow_comments>
    <allow_embedding>True</allow_embedding>
    <allow_ratings>True</allow_ratings>
    <allow_responses>Approve</allow_responses>
    <start_time>{$start_time}</start_time>
    <!-- <public>True</public> -->
    <channel>{$channel}</channel>
    <title>{$title}</title>
    <description>{$description}</description>
    <genre>{$genre}</genre>
EOT;

			if(count($words)>0){
				foreach($words as $word){
					$word = trim($word);
					if($word != ""){
						$content .= "
    <keyword>{$word}</keyword>";
					}
				}
      }
				
				$content .= <<<EOT
  </video>
EOT;
				if($this->getAction() == "Insert"){

					$content .= <<<EOT

  <!-- connect all of the video files in the feed to the movie asset -->
  <relationship>
    <item path="/feed/video[1]" />
    <related_item path="/feed/file[1]" />
  </relationship>
EOT;
  
  /*

  <relationship>
    <item path="/feed/asset[1]" />
    <related_item path="/feed/file[1]" />
  </relationship>
  <relationship>
    <item path="/feed/video[1]" />
    <related_item path="/feed/file[1]" />
  </relationship>

  <!-- Rights administration rules are the same as ownership -->
  <rights_admin type="usage" owner="True"/>
  <rights_admin type="match" owner="True"/>

  <!-- Worldwide ownership for the asset -->
  <ownership asset="/feed/asset[1]">
    <owner type="partner" name="tvcultura" />
  </ownership>

  <!-- Claim the video and set a usage policy to a saved policy. -->
  <claim type="audiovisual"
      asset="/feed/asset[1]"
      video="/feed/video[1]"
      rights_admin="/feed/rights_admin[1]"
      rights_policy="/external/rights_policy[@name='Track in all countries']"/>

  <!-- Set administrator's default match policy using a saved policy. -->
  <relationship>
    <item path="/feed/rights_admin[@type='match']" />
    <item path="/external/rights_policy[@name='Track in all countries']" />
    <related_item path="/feed/asset[1]" />
  </relationship>
EOT;
        */
				}

				$content .= <<<EOT

</feed>
EOT;

				//Write 2.0XML 
				$fp = fopen($folder.'.xml', 'a+');
        
        $utf8 = $content; // file must be UTF-8 encoded
        $iso88591_1 = utf8_encode(utf8_decode($utf8));
        
        //$iso88591_2 = iconv('UTF-8', 'ISO-8859-1', $utf8);
        //$iso88591_2 = mb_convert_encoding($utf8, 'ISO-8859-1', 'UTF-8');

        //$iso88591 = $content; // file must be ISO-8859-1 encoded
        //$utf8_1 = utf8_encode($iso88591);
        //$utf8_2 = iconv('ISO-8859-1', 'UTF-8', $iso88591);
        //$utf8_2 = mb_convert_encoding($iso88591, 'UTF-8', 'ISO-8859-1');
        
        fwrite($fp, $iso88591_1);
				fclose($fp);
				chmod($folder.'.xml',0777);

        //Create exec1.php
        $exec1 = 
<<<EOT
#!/usr/bin/php
<?php
set_time_limit(0);
error_reporting(E_ALL);
ini_set('display_errors', '1');

require_once('/var/astolfo/config/ProjectConfiguration.class.php');
\$configuration = ProjectConfiguration::getApplicationConfiguration('backend', 'prod', false);
\$context = sfContext::createInstance(\$configuration);

# Update dropbox status
\$d = Doctrine_Core::getTable('VideoDropbox')->findoneById({$this->getId()});
\$d->setStatus('Processing');
\$d->save();
EOT;
        //Write exec1.php
        $fp = fopen('exec1.php', 'a+');
        fwrite($fp, $exec1);
        fclose($fp);
        chmod('exec1.php',0777);

        //Create exec2.php
        $exec2 = 
<<<EOT
#!/usr/bin/php
<?php
set_time_limit(0);
error_reporting(E_ALL);
ini_set('display_errors', '1');

require_once('/var/astolfo/config/ProjectConfiguration.class.php');
\$configuration = ProjectConfiguration::getApplicationConfiguration('backend', 'prod', false);
\$context = sfContext::createInstance(\$configuration);

# Update dropbox status
\$d = Doctrine_Core::getTable('VideoDropbox')->findoneById({$this->getId()});
\$d->setStatus('Waiting Youtube');
\$d->save();
EOT;
        //Write exec2.php
        $fp = fopen('exec2.php', 'a+');
        fwrite($fp, $exec2);
        fclose($fp);
        chmod('exec2.php',0777);
        
        //Create run.sh
        $run = 
<<<EOT
#!/bin/sh
/usr/bin/php -q /var/astolfo/web/uploads/dropbox/$folder/exec2.php >> log.txt
sftp tvcultura@tvcultura.xfer.youtube.com << ls
mkdir /$folder
cd $folder
EOT;

        if($this->getAction() == "Insert"){
          $run .=
<<<EOT

put $file_folder$file
EOT;
        }
        
          $run .= 
<<<EOT

put /var/astolfo/web/uploads/dropbox/$folder/$folder.xml
put /var/astolfo/web/uploads/dropbox/delivery.complete
bye
END_SCRIPT
exit 0
EOT;
        //Write run.php
        $fp = fopen('run.sh', 'a+');
        fwrite($fp, $run);
        fclose($fp);
        chmod('run.sh',0777);

        echo exec("./run.sh > /dev/null &");

				return true;

			//}
			//else{
				//$this->delete();
			//}

		}
		else{
			return false;
		}

	}

	public function checkYoutubeStatus() {
		error_reporting(E_ALL);
		ini_set('display_errors', '1');

		print "<br>>>>VIDEO";
		
		//check action and status
		if((($this->getAction() == "Insert")||($this->getAction() == "Update"))&&($this->getStatus() == "Waiting Youtube")){
			$connection = ssh2_connect('tvcultura.xfer.youtube.com', 22, array('hostkey', 'ssh-dss'));
			if(ssh2_auth_pubkey_file($connection, 'tvcultura', '/var/astolfo/.ssh/id_dsa.pub', '/var/astolfo/.ssh/id_dsa')) {	
				//echo "Public Key Authentication Successful";
				$sftp = ssh2_sftp($connection);
				
				$f = "/".$this->getFolder();
				$dir = "ssh2.sftp://$sftp/".$this->getFolder();
				$ff = str_replace("//","","/".$this->getFolder());
				$file = "status-".$this->getFolder().".xml";
        
        //print ">>>".'ssh2.sftp://'.$sftp.'/'.$f.'/'.$file;

        $stream = @fopen('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file, 'r');

				//if(is_file('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file)){
        if($stream){

					$stream = fopen('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file, 'r');
		      if(!$stream)
		        throw new Exception("Could not open file: $file");

		      $contents = stream_get_contents($stream, -1);            					
		      fclose($stream);
									
		      @unlink(sfConfig::get('sf_upload_dir').'/dropbox/'.substr($ff,1,strlen($ff))."/status-".substr($ff,1,strlen($ff)).".xml");
		      file_put_contents(sfConfig::get('sf_upload_dir').'/dropbox/'.substr($ff,1,strlen($ff))."/status-".substr($ff,1,strlen($ff)).".xml", $contents);
		      @fclose($stream);

		      
		      $xml = new SimpleXMLElement($contents);
		      $return = true;
		      $returnId = false;
		      foreach ($xml->action as $action) {
		      	//Parent
		      	print "<br>p>>".$action['name'];
		      	print "<br>p>>>>".$action->status;
		      	print "<br>p>>>>".$action->id;
		      	if($action->id != ""){
		      		$returnText = "Live! - ".$action->id;
		      		$returnId = $action->id;
		      	}

		      	/*
						foreach ($action->action->children() as $children) {
							print "<br>c>>".$children['name'];
							print "<br>c>>>>".$children->status;
							if($children->status == "Failure"){
								$return = false;
								$returnText = $children->status_detail;
                $aux = explode("video ID is ", $returnText);
                if(count($aux) > 1)
                  $returnId = substr(end($aux), 0, strlen(end($aux))-1);
							  	print "<br>>>>>>>>>>>".$children->status_detail;
							}
							elseif(($children['name'] == "Update video") && ($children->status == "Success")){
								$return = true;
								$returnText = $children->status_detail." - ".$children->id;
								$returnId = $children->id;
								print "<br>>>>>>>>>>>".$children->status_detail;
								print "<br>>>>>>>>>>>".$children->id;
							}
							elseif(($children['name'] == "Submit video") && ($children->status == "Success")){
								$return = true;
								$returnText = $children->status_detail." - ".$children->id;
								$returnId = $children->id;
								print "<br>>>>>>>>>>>".$children->status_detail;
								print "<br>>>>>>>>>>>".$children->id;
							}
						}
						*/
							
						//}
						
						if(count($action->action) > 0){
							foreach($action->action as $action) {
								print "<br>c>>".$action['name'];
								print "<br>c>>>>".$action->status;
								if($action->status == "Failure"){
									$return = false;
									$returnText = $action->status_detail;
                  $aux = explode("video ID is ", $returnText);
                  if(count($aux) > 1)
                    $returnId = substr(end($aux), 0, strlen(end($aux))-1);
									  print "<br>>>>>>>>>>>".$action->status_detail;
								}
								elseif((($action['name'] == "Update video")||($action['name'] == "Submit video")) && ($action->status == "Success")){
									$return = true;
									$returnText = $action->status_detail." - ".$action->id;
									$returnId = $action->id;
									print "<br>>>>>>>>>>>".$action->status_detail;
									print "<br>>>>>>>>>>>".$action->id;
								}
							}
						}

					}

          if(isset($returnId)){
            $this->setYoutubeId($returnId);
            $v = Doctrine_Core::getTable('AssetVideo')->findoneById($this->AssetVideo->getId());
            $v->setYoutubeId($returnId);
            $v->save();
            $return = true;
          }
 
					if(!$return){
						$this->setStatus("Failure");
            if(isset($returnText))
						  $this->setMessage($returnText);
						$this->save();
						return 2;
					}else{
						$this->setStatus("Success");
            if(isset($returnText))
						  $this->setMessage($returnText);
						$this->save();
						return 1;
					}
				}else{
					return 3;
				}
			}
			else {
				echo "Public Key Authentication Failed";
			}
		}
	}














  public function processPenddingInsertAction2() {
    //check action and status
    if((($this->getAction() == "Insert")||($this->getAction() == "Update"))&&($this->getStatus() == "Pendding")){
        //check if files exists
      //if(is_file(sfConfig::get('sf_upload_dir').'/assets/video/original/'.$this->AssetVideo->getOriginalFile())){
        if($this->AssetVideoGallery->Asset->Site->getYoutubeChannel() != ""){
          $channel  = $this->AssetVideoGallery->Asset->Site->getYoutubeChannel();
        }else{
          $channel = "cultura";
        }
        if($this->AssetVideoGallery->Asset->Site->getYoutubeGenre() != ""){
          $genre    = $this->AssetVideoGallery->Asset->Site->getYoutubeGenre();
        }else{
          $genre = "Entertainment";
        }

        $files = $this->AssetVideoGallery->Asset->retriveRelatedAssetsByAssetTypeId(6);
        $has_file = true;
        $folder = time();
        $file_folder = sfConfig::get('sf_upload_dir')."/assets/video/original/";

        //Media properties
        $title = trim(substr(str_replace('\n',' ',str_replace('&','&amp;',$this->AssetVideoGallery->Asset->getTitle())),0,95));
        $description = trim(str_replace('\n',' ',str_replace('&','&amp;',$this->AssetVideoGallery->Asset->getDescription())));
        $words = $this->AssetVideoGallery->Asset->getTags();
        $headline = ($this->AssetVideoGallery->getHeadline()=="") ? 'Sem notas' : $this->AssetVideoGallery->getHeadline();
        $description = ($description=="") ? 'TV Cultura' : $description;
        if(count($words) <= 0) $words[] = 'TV Cultura';
        
        if($this->AssetVideoGallery->Asset->getDateStart() != ""){
          $a = explode(" ", $this->AssetVideoGallery->Asset->getDateStart());
          $start_time = $a[0]."T".$a[1]."-03:00";
        }
        else
          $start_time = "1997-07-16T19:20:30-03:00";
        
        //Folder
        $this->setFolder($folder);
        $this->save();
        
        $dropboxDir = sfConfig::get('sf_upload_dir').'/dropbox/'.$this->getFolder();
        if(!is_dir($dropboxDir))
          mkdir($dropboxDir, 0777);
        chdir($dropboxDir);

        $asset_id = '';
        if($this->getAction() != "Insert")
          $asset_id .= ' id="'.$this->AssetVideoGallery->getYoutubeId().'"';

        //XML
        $content = <<<EOT
<?xml version="1.0"?>
<feed xmlns="http://www.youtube.com/schemas/cms/2.0"
    notification_email="emersonestrella@tvcultura.com.br" strict="True">
    

EOT;

/*
  <asset type="web">
    <custom_id>CULTURA-{$this->AssetVideo->getId()}</custom_id>
    <description>{$description}</description>
    <notes>{$headline}</notes>
    <title>{$title}</title>
    <url>http://www.tvcultura.com.br/</url>
  </asset>
*/

        if($this->getAction() == "Insert"){
          $title = str_replace('"', '&quot;', $title);
          $content .= "\t<playlist name=\"".$title."\" channel=\"".$channel."\">";
          foreach($files as $a){
            if($a->AssetVideo->getYoutubeId() != ""){
              if($a->related_asset_is_active != "-1"){
                $content .= "\n\t\t<item path=\"/external/video[@id='".$a->AssetVideo->getYoutubeId()."']\" />";
              }
              else{
                $d = Doctrine_Core::getTable('RelatedAsset')->findOneById($a->related_asset_id);
                if($d)
                  $d->delete();
              }
            }
          }
          $content .= "\n\t</playlist>";
        }else{
          $content .= "\t<playlist name=\"".$title."\" id=\"".$this->AssetVideoGallery->getYoutubeId()."\">";
          $i=0;
          foreach($files as $a){
            if($a->AssetVideo->getYoutubeId() != ""){
              if($a->related_asset_is_active != "-1"){
                $i++;
                $content .= "\n\t\t<item index=\"".$i."\" path=\"/external/video[@id='".$a->AssetVideo->getYoutubeId()."']\" />";
              }
              else{
                $content .= "\n\t\t<item action=\"delete\" path=\"/external/video[@id='".$a->AssetVideo->getYoutubeId()."']\" />";
                $d = Doctrine_Core::getTable('RelatedAsset')->findOneById($a->related_asset_id);
                if($d)
                  $d->delete();
              }
            }
          }
          $content .= "\n\t</playlist>";
        }
        $content .= "\n</feed>";

        //Write 2.0XML 
        $fp = fopen($folder.'.xml', 'a+');
        
        $utf8 = $content; // file must be UTF-8 encoded
        $iso88591_1 = utf8_encode(utf8_decode($utf8));
        
        //$iso88591_2 = iconv('UTF-8', 'ISO-8859-1', $utf8);
        //$iso88591_2 = mb_convert_encoding($utf8, 'ISO-8859-1', 'UTF-8');

        //$iso88591 = $content; // file must be ISO-8859-1 encoded
        //$utf8_1 = utf8_encode($iso88591);
        //$utf8_2 = iconv('ISO-8859-1', 'UTF-8', $iso88591);
        //$utf8_2 = mb_convert_encoding($iso88591, 'UTF-8', 'ISO-8859-1');
        
        fwrite($fp, $iso88591_1);
        fclose($fp);
        chmod($folder.'.xml',0777);

        //Create exec1.php
        $exec1 = 
<<<EOT
#!/usr/bin/php
<?php
set_time_limit(0);
error_reporting(E_ALL);
ini_set('display_errors', '1');

require_once('/var/astolfo/config/ProjectConfiguration.class.php');
\$configuration = ProjectConfiguration::getApplicationConfiguration('backend', 'prod', false);
\$context = sfContext::createInstance(\$configuration);

# Update dropbox status
\$d = Doctrine_Core::getTable('VideoDropbox')->findoneById({$this->getId()});
\$d->setStatus('Processing');
\$d->save();
EOT;
        //Write exec1.php
        $fp = fopen('exec1.php', 'a+');
        fwrite($fp, $exec1);
        fclose($fp);
        chmod('exec1.php',0777);

        //Create exec2.php
        $exec2 = 
<<<EOT
#!/usr/bin/php
<?php
set_time_limit(0);
error_reporting(E_ALL);
ini_set('display_errors', '1');

require_once('/var/astolfo/config/ProjectConfiguration.class.php');
\$configuration = ProjectConfiguration::getApplicationConfiguration('backend', 'prod', false);
\$context = sfContext::createInstance(\$configuration);

# Update dropbox status
\$d = Doctrine_Core::getTable('VideoDropbox')->findoneById({$this->getId()});
\$d->setStatus('Waiting Youtube');
\$d->save();
EOT;
        //Write exec2.php
        $fp = fopen('exec2.php', 'a+');
        fwrite($fp, $exec2);
        fclose($fp);
        chmod('exec2.php',0777);
        
        //Create run.sh
        $run = 
<<<EOT
#!/bin/sh
/usr/bin/php -q /var/astolfo/web/uploads/dropbox/$folder/exec2.php >> log.txt
sftp tvcultura@tvcultura.xfer.youtube.com << ls
mkdir /$folder
cd $folder
EOT;

        if($this->getAction() == "Insert"){
          $run .=
<<<EOT

put $file_folder$file
EOT;
        }
        
          $run .= 
<<<EOT

put /var/astolfo/web/uploads/dropbox/$folder/$folder.xml
put /var/astolfo/web/uploads/dropbox/delivery.complete
bye
END_SCRIPT
exit 0
EOT;
        //Write run.php
        $fp = fopen('run.sh', 'a+');
        fwrite($fp, $run);
        fclose($fp);
        chmod('run.sh',0777);

        echo exec("./run.sh > /dev/null &");

        return true;

      //}
      //else{
        //$this->delete();
      //}

    }
    else{
      return false;
    }

  }



  public function checkYoutubeStatus2() {
    error_reporting(E_ALL);
    ini_set('display_errors', '1');

    print "<br>>>>PLAYLIST";
    
    //check action and status
    if((($this->getAction() == "Insert")||($this->getAction() == "Update"))&&($this->getStatus() == "Waiting Youtube")){
      $connection = ssh2_connect('tvcultura.xfer.youtube.com', 22, array('hostkey', 'ssh-dss'));
      if(ssh2_auth_pubkey_file($connection, 'tvcultura', '/var/astolfo/.ssh/id_dsa.pub', '/var/astolfo/.ssh/id_dsa')) { 
        //echo "Public Key Authentication Successful";
        $sftp = ssh2_sftp($connection);
        
        $f = "/".$this->getFolder();
        $dir = "ssh2.sftp://$sftp/".$this->getFolder();
        $ff = str_replace("//","","/".$this->getFolder());
        $file = "status-".$this->getFolder().".xml";
        
        //print ">>>".'ssh2.sftp://'.$sftp.'/'.$f.'/'.$file;

        $stream = @fopen('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file, 'r');

        //if(is_file('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file)){
        if($stream){

          $stream = fopen('ssh2.sftp://'.$sftp.'/'.$f.'/'.$file, 'r');
          if(!$stream)
            throw new Exception("Could not open file: $file");

          $contents = stream_get_contents($stream, -1);                     
          fclose($stream);
                  
          @unlink(sfConfig::get('sf_upload_dir').'/dropbox/'.substr($ff,1,strlen($ff))."/status-".substr($ff,1,strlen($ff)).".xml");
          file_put_contents(sfConfig::get('sf_upload_dir').'/dropbox/'.substr($ff,1,strlen($ff))."/status-".substr($ff,1,strlen($ff)).".xml", $contents);
          @fclose($stream);
          
          $xml = new SimpleXMLElement($contents);
          $return = true;
          $returnId = false;
          foreach ($xml->action as $action) {
            //Parent
            print "<br>p>>".$action['name'];
            print "<br>p>>>>".$action->status;
            print "<br>p>>>>".$action->id;
            if($action->id != ""){
              $returnText = "Live! - ".$action->id;
              $returnId = $action->id;
            }
          }

          if($returnId){
            $this->setYoutubeId($returnId);
            $v = Doctrine_Core::getTable('AssetVideoGallery')->findoneById($this->AssetVideoGallery->getId());
            $v->setYoutubeId($returnId);
            $v->save();
            $return = true;
          }
 
          if(!$return){
            $this->setStatus("Failure");
            if(isset($returnText))
              $this->setMessage($returnText);
            $this->save();
            return 2;
          }else{
            $this->setStatus("Success");
            if(isset($returnText))
              $this->setMessage($returnText);
            $this->save();
            return 1;
          }
        }else{
          return 3;
        }
      }
      else {
        echo "Public Key Authentication Failed";
      }
    }
  }





}