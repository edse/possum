<?php

/**
 * AssetVideo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    astolfo
 * @subpackage model
 * @author     Emerson Estrella
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class AssetVideo extends BaseAssetVideo
{

	public function postUpdate($values)
	{
		//clear cache
		@exec("rm /var/frontend/web/cache/".str_replace("http://", "", $this->Asset->retriveUrl2()));
	}
	
  public function __toString(){
    if($this->Asset->getTitle() != "")
      return $this->Asset->getTitle();
    else
      return "-";
  }
  
  public function getFramePLayer($s=3){
    if($s == 3)
      return "<iframe title=\''.$this->Asset->getTitle().'\' width=\'310\' height=\'186\' src=\'http://www.youtube.com/embed/WuQnd3d9IuA\' frameborder=\'0\' allowfullscreen></iframe>";
    else
      return "<iframe title=\''.$this->Asset->getTitle().'\' width=\'420\' height=\'252\' src=\'http://www.youtube.com/embed/WuQnd3d9IuA\' frameborder=\'0\' allowfullscreen></iframe>";
  }
  
  public function getEmbedPLayer($s=3){
    if($s == 3)
      return "<p><embed width=\'310\' height=\'186\' type=\'application/x-shockwave-flash\' src=\'http://www.tvcultura.com.br/js/mediaplayer/player.swf\' style=\'\' id=\'mpl\' name=\'mpl\' quality=\'high\' allowscriptaccess=\'always\' allowfullscreen=\'true\' wmode=\'transparent\' autoplay=\'false\' flashvars=\'&file=http://www.youtube.com/watch?v=WuQnd3d9IuA&controlbar=over\'></embed></p>";
    else
      return "<p><embed width=\'420\' height=\'252\' type=\'application/x-shockwave-flash\' src=\'http://www.tvcultura.com.br/js/mediaplayer/player.swf\' style=\'\' id=\'mpl\' name=\'mpl\' quality=\'high\' allowscriptaccess=\'always\' allowfullscreen=\'true\' wmode=\'transparent\' autoplay=\'false\' flashvars=\'&file=http://www.youtube.com/watch?v=WuQnd3d9IuA&controlbar=over\'></embed></p>";
  }
  
  public function formatBytes($bytes) {
     if ($bytes < 1024) return $bytes.' B';
     elseif ($bytes < 1048576) return round($bytes / 1024, 2).' KB';
     elseif ($bytes < 1073741824) return round($bytes / 1048576, 2).' MB';
     elseif ($bytes < 1099511627776) return round($bytes / 1073741824, 2).' GB';
     else return round($bytes / 1099511627776, 2).' TB';
  }

  public function ffmpegVideoInfo($file) {
    $file = str_replace(" ", "\ ", $file);
    $r = array();
    exec('ffmpeg -i '.$file.' 2>&1', $output);
    foreach ($output as $value) {
      if(strstr($value, 'Duration: ')) {
        $aux = explode("Duration: ", $value);
        $aux2 = explode(", ", $aux[1]);
        $r["duration"] = $aux2[0]; 
      }
      elseif(strstr($value, 'width')) {
        $aux = explode("width", $value);
        $aux2 = explode(": ", $aux[1]);
        $r["width"] = $aux2[1]; 
      }
      elseif(strstr($value, 'height')) {
        $aux = explode("height", $value);
        $aux2 = explode(": ", $aux[1]);
        $r["height"] = $aux2[1]; 
      }
      elseif(strstr($value, 'framerate')) {
        $aux = explode("framerate", $value);
        $aux2 = explode(": ", $aux[1]);
        $r["framerate"] = $aux2[1]; 
      }
    }
    return $r;
  }

  public function retriveStartFromParameter(){
    if($this->getStartFrom() != ""){
      $aux = explode(":",$this->getStartFrom());
      return "&start=".((intval($aux[0])*60)+(intval($aux[1])));
    }
  }

}

